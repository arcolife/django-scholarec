*) IMMEDIATE
   - Implement current algorithms used in mrec/recsys library for Python
   - Use construct_call_graph.py and graphViz library to construct 
     call graph of main.py
   - Write useful sample cases. #partial
   - Try the BeautifulSoup XML parser #done
   - Try xmltodict XML parser #done
   - Try xml XML parser #done
   - Add Webhooks for Travis CI #done
   - Asses requirements.txt #partial
   - Refactor public/index.html #done
   - Add public/mockups #done
   - Connect Web Interface

*) ISSUES
			~~ In addition to github issue list ~~
   - Web Interface:
     - Add top citations / references column 
     - Integrate with Python script, to search term in paper repo
     - Add suggestions column on search page
     - Add definition column to search page
     - topwords / citations count display. fulltext link and pdf downloader #partial
     - Select tools for data visualization and infographics 
       (Google Chart API / D3 / GraphViz / Processing / etc.. )     

   - Explore Search Engine / Indexing options: 
     - Lucene/Solr
     - lupyne
     - solrpy
     - ES
     - sunburnt
     - 
   - Add to DocumentData.py for processing plain text docs to extract topwords
   - Add One more module, in addition to Base, for main recommendation engine
   - Add default 'arXiv_parsing_example.py' to DocumentClass
   - Add script to retrieve wikipedia/DuckDuckGo/Google for search term #partial
   - Add paper.py (multithreaded batch processing jobs):
     Extract the ID's. segregate, and make a list by ID's.
     Then make shell / python script to batch process adding 
     of these papers to the database
   - A generic extract_data() function; specifying tags as args
     OR
     Different Document classes to extract data from different sources
   - Represent the structure modulewise #done
   - improve run-tests.sh
   - handle data_dict atribute error on response dissatisfaction #done
   - handle query response strictness (exact match) #obsolete
   - ETL .. DBLP / CERN / arXiv .. data onto ES instance #obsolete
   - Run scripts to extract related data from arXiv (if no dump found). #done
     Check rate limits.
   - Integrate ES with MongoDB and write API script

*) FUTURE
   - Unit testing methods integrations, Use Jenkins to keep track?
   - Develop aggregation methodologies for ES instance
   - DataSets - Comp. Sc. / Physics / ..